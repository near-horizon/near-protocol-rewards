# Makefile to build, tag and push the Docker image to AWS ECR
# All comments and outputs are in English as per code quality rules.

.PHONY: help deploy login build tag tag_latest push push_latest print clean run run_s3

# -----------------------------
# Configurable variables
# -----------------------------
# Override with: make deploy AWS_REGION=us-east-1 IMAGE_TAG=123
AWS_REGION ?= us-east-2
AWS_ACCOUNT_ID ?= 975050208249
ECR_REPO_PATH ?= near-protocol-rewards/near-protocol-rewards
# Local image name (left side of docker build/tag). Can be overridden if needed.
LOCAL_IMAGE ?= $(ECR_REPO_PATH)

# Generated by default as epoch seconds if not provided (computed ONCE)
# Using a conditional with immediate assignment to avoid re-evaluation on each target.
ifeq ($(origin IMAGE_TAG), undefined)
IMAGE_TAG := $(shell date +%s)
endif

# If set to 1, will also tag and push :latest
PUSH_LATEST ?= 1

# Derived variables
ECR_REGISTRY := $(AWS_ACCOUNT_ID).dkr.ecr.$(AWS_REGION).amazonaws.com
REMOTE_IMAGE := $(ECR_REGISTRY)/$(ECR_REPO_PATH)

.DEFAULT_GOAL := help

help:
	@echo "Targets:"
	@echo "  make deploy          -> Login, build, tag and push image (and latest if PUSH_LATEST=1)"
	@echo "  make login           -> AWS ECR login using get-login-password"
	@echo "  make build           -> Docker build with tag $(LOCAL_IMAGE):$(IMAGE_TAG)"
	@echo "  make tag             -> Tag built image as $(REMOTE_IMAGE):$(IMAGE_TAG)"
	@echo "  make tag_latest      -> Tag built image as $(REMOTE_IMAGE):latest"
	@echo "  make push            -> Push $(REMOTE_IMAGE):$(IMAGE_TAG)"
	@echo "  make push_latest     -> Push $(REMOTE_IMAGE):latest"
	@echo "  make run             -> Run src/index.ts locally via npm (uses ts-node)"
	@echo "  make run_s3          -> Run src/index.ts with SAVE_ON_S3=1 to upload to S3"
	@echo "  make print           -> Print resolved variables"
	@echo "  make clean           -> Remove local image tags (does not delete remote)"
	@echo "\nVariables (override with VAR=value):"
	@echo "  AWS_REGION=$(AWS_REGION)"
	@echo "  AWS_ACCOUNT_ID=$(AWS_ACCOUNT_ID)"
	@echo "  ECR_REPO_PATH=$(ECR_REPO_PATH)"
	@echo "  LOCAL_IMAGE=$(LOCAL_IMAGE)"
	@echo "  IMAGE_TAG=$(IMAGE_TAG)"
	@echo "  PUSH_LATEST=$(PUSH_LATEST)"

print:
	@echo "AWS_REGION=$(AWS_REGION)"
	@echo "AWS_ACCOUNT_ID=$(AWS_ACCOUNT_ID)"
	@echo "ECR_REPO_PATH=$(ECR_REPO_PATH)"
	@echo "LOCAL_IMAGE=$(LOCAL_IMAGE)"
	@echo "IMAGE_TAG=$(IMAGE_TAG)"
	@echo "PUSH_LATEST=$(PUSH_LATEST)"
	@echo "ECR_REGISTRY=$(ECR_REGISTRY)"
	@echo "REMOTE_IMAGE=$(REMOTE_IMAGE)"

login:
	@set -e; \
	echo "Logging in to ECR registry: $(ECR_REGISTRY) in region $(AWS_REGION)"; \
	aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(ECR_REGISTRY)

build:
	@set -e; \
	echo "Building Docker image: $(LOCAL_IMAGE):$(IMAGE_TAG)"; \
	docker build -t $(LOCAL_IMAGE):$(IMAGE_TAG) .

tag:
	@set -e; \
	echo "Tagging image: $(LOCAL_IMAGE):$(IMAGE_TAG) -> $(REMOTE_IMAGE):$(IMAGE_TAG)"; \
	docker tag $(LOCAL_IMAGE):$(IMAGE_TAG) $(REMOTE_IMAGE):$(IMAGE_TAG)

tag_latest:
	@set -e; \
	echo "Tagging image: $(LOCAL_IMAGE):$(IMAGE_TAG) -> $(REMOTE_IMAGE):latest"; \
	docker tag $(LOCAL_IMAGE):$(IMAGE_TAG) $(REMOTE_IMAGE):latest

push:
	@set -e; \
	echo "Pushing image: $(REMOTE_IMAGE):$(IMAGE_TAG)"; \
	docker push $(REMOTE_IMAGE):$(IMAGE_TAG)

push_latest:
	@set -e; \
	echo "Pushing image: $(REMOTE_IMAGE):latest"; \
	docker push $(REMOTE_IMAGE):latest

deploy: login build tag push
	@set -e; \
	echo "Deploy complete for tag: $(IMAGE_TAG)"; \
	if [ "$(PUSH_LATEST)" = "1" ]; then \
	  echo "Also tagging and pushing :latest"; \
	  $(MAKE) IMAGE_TAG=$(IMAGE_TAG) tag_latest; \
	  $(MAKE) IMAGE_TAG=$(IMAGE_TAG) push_latest; \
	else \
	  echo "Skipping :latest (set PUSH_LATEST=1 to enable)"; \
	fi

clean:
	@set -e; \
	echo "Removing local image tags (if present)"; \
	-docker rmi $(LOCAL_IMAGE):$(IMAGE_TAG) || true; \
	-docker rmi $(REMOTE_IMAGE):$(IMAGE_TAG) || true; \
	-docker rmi $(REMOTE_IMAGE):latest || true

run:
	@set -e; \
	echo "Running src/index.ts (ts-node via npm scripts)"; \
	npm run start

run_s3:
	@set -e; \
	echo "Running src/index.ts with SAVE_ON_S3=1 (will upload to S3)"; \
	SAVE_ON_S3=1 npm run start

